/**
 */
package finance.provider;

import finance.util.FinanceAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FinanceItemProviderAdapterFactory extends FinanceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FinanceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.Account} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountItemProvider accountItemProvider;

	/**
	 * This creates an adapter for a {@link finance.Account}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountAdapter() {
		if (accountItemProvider == null) {
			accountItemProvider = new AccountItemProvider(this);
		}

		return accountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.AccountType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountTypeItemProvider accountTypeItemProvider;

	/**
	 * This creates an adapter for a {@link finance.AccountType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountTypeAdapter() {
		if (accountTypeItemProvider == null) {
			accountTypeItemProvider = new AccountTypeItemProvider(this);
		}

		return accountTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.AccountList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountListItemProvider accountListItemProvider;

	/**
	 * This creates an adapter for a {@link finance.AccountList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountListAdapter() {
		if (accountListItemProvider == null) {
			accountListItemProvider = new AccountListItemProvider(this);
		}

		return accountListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.FinancialEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinancialEntityItemProvider financialEntityItemProvider;

	/**
	 * This creates an adapter for a {@link finance.FinancialEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinancialEntityAdapter() {
		if (financialEntityItemProvider == null) {
			financialEntityItemProvider = new FinancialEntityItemProvider(this);
		}

		return financialEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.FinancialEntityList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinancialEntityListItemProvider financialEntityListItemProvider;

	/**
	 * This creates an adapter for a {@link finance.FinancialEntityList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinancialEntityListAdapter() {
		if (financialEntityListItemProvider == null) {
			financialEntityListItemProvider = new FinancialEntityListItemProvider(this);
		}

		return financialEntityListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.FinancialProduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinancialProductItemProvider financialProductItemProvider;

	/**
	 * This creates an adapter for a {@link finance.FinancialProduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinancialProductAdapter() {
		if (financialProductItemProvider == null) {
			financialProductItemProvider = new FinancialProductItemProvider(this);
		}

		return financialProductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.FinancialProductType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinancialProductTypeItemProvider financialProductTypeItemProvider;

	/**
	 * This creates an adapter for a {@link finance.FinancialProductType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinancialProductTypeAdapter() {
		if (financialProductTypeItemProvider == null) {
			financialProductTypeItemProvider = new FinancialProductTypeItemProvider(this);
		}

		return financialProductTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.FinancialProductTypeList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinancialProductTypeListItemProvider financialProductTypeListItemProvider;

	/**
	 * This creates an adapter for a {@link finance.FinancialProductTypeList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinancialProductTypeListAdapter() {
		if (financialProductTypeListItemProvider == null) {
			financialProductTypeListItemProvider = new FinancialProductTypeListItemProvider(this);
		}

		return financialProductTypeListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.Party} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PartyItemProvider partyItemProvider;

	/**
	 * This creates an adapter for a {@link finance.Party}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPartyAdapter() {
		if (partyItemProvider == null) {
			partyItemProvider = new PartyItemProvider(this);
		}

		return partyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.PartyList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PartyListItemProvider partyListItemProvider;

	/**
	 * This creates an adapter for a {@link finance.PartyList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPartyListAdapter() {
		if (partyListItemProvider == null) {
			partyListItemProvider = new PartyListItemProvider(this);
		}

		return partyListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.RegulatoryEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegulatoryEntityItemProvider regulatoryEntityItemProvider;

	/**
	 * This creates an adapter for a {@link finance.RegulatoryEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegulatoryEntityAdapter() {
		if (regulatoryEntityItemProvider == null) {
			regulatoryEntityItemProvider = new RegulatoryEntityItemProvider(this);
		}

		return regulatoryEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.RegulatoryEntitytype} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegulatoryEntitytypeItemProvider regulatoryEntitytypeItemProvider;

	/**
	 * This creates an adapter for a {@link finance.RegulatoryEntitytype}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegulatoryEntitytypeAdapter() {
		if (regulatoryEntitytypeItemProvider == null) {
			regulatoryEntitytypeItemProvider = new RegulatoryEntitytypeItemProvider(this);
		}

		return regulatoryEntitytypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.RegulatoryEntityList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegulatoryEntityListItemProvider regulatoryEntityListItemProvider;

	/**
	 * This creates an adapter for a {@link finance.RegulatoryEntityList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegulatoryEntityListAdapter() {
		if (regulatoryEntityListItemProvider == null) {
			regulatoryEntityListItemProvider = new RegulatoryEntityListItemProvider(this);
		}

		return regulatoryEntityListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.Regulation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegulationItemProvider regulationItemProvider;

	/**
	 * This creates an adapter for a {@link finance.Regulation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegulationAdapter() {
		if (regulationItemProvider == null) {
			regulationItemProvider = new RegulationItemProvider(this);
		}

		return regulationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.SpecificAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecificAttributeItemProvider specificAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link finance.SpecificAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecificAttributeAdapter() {
		if (specificAttributeItemProvider == null) {
			specificAttributeItemProvider = new SpecificAttributeItemProvider(this);
		}

		return specificAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.Transction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransctionItemProvider transctionItemProvider;

	/**
	 * This creates an adapter for a {@link finance.Transction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransctionAdapter() {
		if (transctionItemProvider == null) {
			transctionItemProvider = new TransctionItemProvider(this);
		}

		return transctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.TransctionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransctionTypeItemProvider transctionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link finance.TransctionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransctionTypeAdapter() {
		if (transctionTypeItemProvider == null) {
			transctionTypeItemProvider = new TransctionTypeItemProvider(this);
		}

		return transctionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.TransctionMode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransctionModeItemProvider transctionModeItemProvider;

	/**
	 * This creates an adapter for a {@link finance.TransctionMode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransctionModeAdapter() {
		if (transctionModeItemProvider == null) {
			transctionModeItemProvider = new TransctionModeItemProvider(this);
		}

		return transctionModeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.TransctionList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransctionListItemProvider transctionListItemProvider;

	/**
	 * This creates an adapter for a {@link finance.TransctionList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransctionListAdapter() {
		if (transctionListItemProvider == null) {
			transctionListItemProvider = new TransctionListItemProvider(this);
		}

		return transctionListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.TransctionTypeList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransctionTypeListItemProvider transctionTypeListItemProvider;

	/**
	 * This creates an adapter for a {@link finance.TransctionTypeList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransctionTypeListAdapter() {
		if (transctionTypeListItemProvider == null) {
			transctionTypeListItemProvider = new TransctionTypeListItemProvider(this);
		}

		return transctionTypeListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link finance.TransctionModeList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransctionModeListItemProvider transctionModeListItemProvider;

	/**
	 * This creates an adapter for a {@link finance.TransctionModeList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransctionModeListAdapter() {
		if (transctionModeListItemProvider == null) {
			transctionModeListItemProvider = new TransctionModeListItemProvider(this);
		}

		return transctionModeListItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (accountItemProvider != null) accountItemProvider.dispose();
		if (accountTypeItemProvider != null) accountTypeItemProvider.dispose();
		if (accountListItemProvider != null) accountListItemProvider.dispose();
		if (financialEntityItemProvider != null) financialEntityItemProvider.dispose();
		if (financialEntityListItemProvider != null) financialEntityListItemProvider.dispose();
		if (financialProductItemProvider != null) financialProductItemProvider.dispose();
		if (financialProductTypeItemProvider != null) financialProductTypeItemProvider.dispose();
		if (financialProductTypeListItemProvider != null) financialProductTypeListItemProvider.dispose();
		if (partyItemProvider != null) partyItemProvider.dispose();
		if (partyListItemProvider != null) partyListItemProvider.dispose();
		if (regulatoryEntityItemProvider != null) regulatoryEntityItemProvider.dispose();
		if (regulatoryEntitytypeItemProvider != null) regulatoryEntitytypeItemProvider.dispose();
		if (regulatoryEntityListItemProvider != null) regulatoryEntityListItemProvider.dispose();
		if (regulationItemProvider != null) regulationItemProvider.dispose();
		if (specificAttributeItemProvider != null) specificAttributeItemProvider.dispose();
		if (transctionItemProvider != null) transctionItemProvider.dispose();
		if (transctionTypeItemProvider != null) transctionTypeItemProvider.dispose();
		if (transctionModeItemProvider != null) transctionModeItemProvider.dispose();
		if (transctionListItemProvider != null) transctionListItemProvider.dispose();
		if (transctionTypeListItemProvider != null) transctionTypeListItemProvider.dispose();
		if (transctionModeListItemProvider != null) transctionModeListItemProvider.dispose();
	}

}
